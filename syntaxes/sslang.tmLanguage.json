{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "sslang",
	"patterns": [
		{
			"include": "#c-block"
		},
		{
			"include": "#c-inline"
		},
		{
			"include": "#type-declaration"
		},
		{
			"include": "#top-level-value"
		},
		{
			"include": "#type-annotation"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#infix_op"
		},
		{
			"include": "#unit"
		},
		{
			"include": "#constructor"
		},
		{
			"include": "#value"
		},
		{
			"comment": "Floats are always decimal",
			"match": "\\b([0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\b",
			"name": "constant.numeric.float.elm"
		},
		{
			"match": "\\b([0-9]+)\\b",
			"name": "constant.numeric.elm"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.sslang",
					"match": "\\b(if|then|else|while|do|par|loop|let|match|after|wait|fun)\\b"
				},
				{
					"name": "keyword.other.sslang",
					"match": "\\b(type|extern)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.sslang",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.sslang",
					"match": "\\\\."
				}
			]
		},
		"chars": {
			"name": "string.quoted.single.sslang",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.sslang",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.sslang",
					"begin": "//",
					"end": "$"
				},
				{
					"name": "comment.block.sslang",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"value": {
			"match": "\\b[a-z][a-zA-Z0-9_]*\\b",
			"name": "meta.value.sslang"
		},
		"infix_op": {
			"match": "(=|<-|==|!=|<=|>=|<|>|\\+|-|\\*|/|%|\\^)",
			"name": "keyword.operator.sslang"
		},
		"constructor": {
			"match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
			"name": "constant.constructor.sslang"
		},
		"unit": {
			"match": "\\(\\)",
			"name": "constant.unit.sslang"
		},
		"c-block": {
			"name": "string.other.sslang",
			"begin": "\\$\\$\\$",
			"end": "\\$\\$\\$"
		},
		"c-inline": {
			"name": "string.other.sslang",
			"begin": "\\$\\$",
			"end": "\\$\\$"
		},
		"type-declaration": {
			"begin": "^(type\\s+)([A-Z][a-zA-Z0-9_']*)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.type.sslang"
				},
				"2": {
					"name": "storage.type.sslang"
				}
			},
			"end": "^(?=\\S)",
			"name": "meta.type.declaration.sslang",
			"patterns": [
				{
					"name": "meta.type.field.sslang",
					"match": "^\\s+([A-Z][a-zA-Z0-9_]*)\\b",
					"captures": {
						"1": {
							"name": "constant.constructor.sslang"
						}
					}
				},
				{
					"match": "\\s+",
					"name": "punctuation.spaces.sslang"
				},
				{
					"match": "\\-\\>",
					"name": "keyword.operator.arrow.sslang"
				},
				{
					"match": "\\b[a-z][a-zA-Z0-9_]*\\b",
					"name": "variable.type.sslang"
				},
				{
					"match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
					"name": "storage.type.sslang"
				},
				{
					"include": "#comments"
				}
			]
		},
		"type-annotation": {
			"begin": "(:)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.annotation.sslang"
				}
			},
			"end": "[\\)\n]",
			"name": "meta.type.annotation.sslang",
			"patterns": [
				{
					"match": "\\-\\>",
					"name": "keyword.operator.arrow.sslang"
				},
				{
					"match": "\\b[a-z][a-zA-Z0-9_]*\\b",
					"name": "variable.type.sslang"
				},
				{
					"match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
					"name": "storage.type.sslang"
				},
				{
					"match": "&",
					"name": "keyword.operator.reference.sslang"
				},
				{
					"match": "\\s+",
					"name": "punctuation.spaces.sslang"
				},
				{
					"include": "#comments"
				}
			]
		},
		"top-level-value": {
			"begin": "^([a-z][a-zA-Z0-9_]*)\\b",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.top_level.sslang"
				}
			},
			"end": "(=)",
			"endCaptures": {
				"1": {
					"name": "keyword.operator.define.sslang"
				}
			},
			"name": "meta.function.top_level.sslang",
			"patterns": [
				{
					"include": "#type-annotation"
				},
				{
					"include": "#value"
				},
				{
					"match": "\\-\\>",
					"name": "keyword.operator.arrow.sslang"
				},
				{
					"match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
					"name": "storage.type.sslang"
				},
				{
					"match": "\\s+",
					"name": "punctuation.spaces.sslang"
				},
				{
					"include": "#comments"
				}
			]
		}
	},
	"scopeName": "source.sslang"
}